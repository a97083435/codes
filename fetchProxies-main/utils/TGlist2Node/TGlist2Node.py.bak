import re, yaml
import time, os
import datetime
import requests  
from tqdm import tqdm   #进度条库
import threading  #线程

#调用自己的模块，先获取执行的目录，再import文件
import sys
sys.path.append(".") #执行目录地址
from utils.subConvert import ip_update
from utils.subConvert.sub_convert import sub_convert


#源文件
source_sublist_path = './sub/sources/TGsubSources.yaml'    

#输出订阅文件位置
outputAllyaml_path = './sub/sources/TGsubNodeAll.yaml'
outputUrlSub_path = './sub/sources/TGsubUrl'
outputBase64Sub_path =  './sub/sources/TGsubUrl64'


def get_sublist():
    with open(source_sublist_path,encoding="UTF-8") as f: # 获取config地址内容
        yamldata = yaml.load(f, Loader=yaml.FullLoader)
    
    new_url_list = []
    
    clashlist = yamldata['clash订阅']
    for url in clashlist:     #读取clashlist的地址
        new_url_list.append(url)
    
    v2list = yamldata['v2订阅']
    for url in v2list:        #读取v2list的地址
        new_url_list.append(url)
    return new_url_list

   
def get_sub_content(url,bar,allProxy):   #将url订阅内容append到allProxy列表，并完成进度bar
    if 'http' in url:
        subContent =sub_convert.convert_remote(url,'url')
        #判断是否解析错误
        if '解析错误' not in subContent:
            allProxy.append(subContent)
            print('\n get_sub_content(url,bar) 中'+url+'解析错误 \n')
    bar.update(1)
# 写入文件模块
def write_file(file,content):
    f = open(file, 'w', encoding= 'utf-8')
    f.write(content)
    f.close()


def urllist_to_sub(new_url_list):  #将url订阅列表内容转换成url,base64,clash文件保存

    allProxy = []
    #计算打印url总数
    lenlines =len(new_url_list)
    print('new_url_list total == '+str(lenlines)+'\n')
    
    #Semaphore 是用于控制进入数量的锁，控制同时进行的线程，内部是基于Condition来进行实现的
    #https://www.cnblogs.com/callyblog/p/11147456.html
    #文件， 读、写， 写一般只是用于一个线程写，读可以允许有多个
    thread_max_num =threading.Semaphore(lenlines)
    
    #进度条添加
    bar = tqdm(total=lenlines, desc='订阅获取：')
    thread_list = []
    
    for line in new_url_list:
        #为每个新URL创建线程
        t = threading.Thread(target=get_sub_content, args=(line,bar,allProxy))
        #加入线程池
        thread_list.append(t)
        #setDaemon()线程守护，配合下面的一组for...t.join(),实现所有线程执行结束后，才开始执行下面代码
        t.setDaemon(True)	#python多线程之t.setDaemon(True) 和 t.join()  https://www.cnblogs.com/my8100/p/7366567.html
		#启动
        t.start()
        
    #等待所有线程完成，配合上面的t.setDaemon(True)
    for t in thread_list:
        t.join()
    bar.close() #进度条结束
    
    # 将列表内容，以行写入字符串？
    allProxy = '\n'.join(allProxy)
	
    #先格式化allProxy列表为YAML
    allyaml = sub_convert.format(allProxy)
    #去重
    if isinstance(allyaml, dict): #如果返回解析错误，不执行makeup
        allyaml = sub_convert.makeup(allyaml, dup_rm_enabled=True, format_name_enabled=True)
        
    # 写入YAML 文件
    print('write YAML file content!')
    write_file(outputAllyaml_path,allyaml)
    
    #获取allyaml_path文件路径
    good_file_path = os.path.abspath(outputAllyaml_path)

    # 写入url 订阅文件 
    print('write URL file content!')
    subContent = sub_convert.convert_remote(good_file_path,'url')
    write_file(outputUrlSub_path,subContent)

    # 写入base64 订阅文件
    print('write Base64 file content!')
    subContent = sub_convert.base64_encode(subContent)
    write_file(outputBase64Sub_path,subContent)


    
if __name__ == '__main__':
    # 下载最新sublist源
    new_url_list = get_sublist()
    ip_update.geoip_update()
    urllist_to_sub(new_url_list)
